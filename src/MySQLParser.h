/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : MySQL.g
 *     -                            On : 2014-04-19 23:24:26
 *     -                for the parser : MySQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
MySQLParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMySQLParser, which is returned from a call to MySQLParserNew().
 *
 * The methods in pMySQLParser are  as follows:
 *
 *  - 
 MySQLParser_relational_op_return
      pMySQLParser->relational_op(pMySQLParser)
 *  - 
 MySQLParser_charset_name_return
      pMySQLParser->charset_name(pMySQLParser)
 *  - 
 MySQLParser_cast_data_type_return
      pMySQLParser->cast_data_type(pMySQLParser)
 *  - 
 MySQLParser_search_modifier_return
      pMySQLParser->search_modifier(pMySQLParser)
 *  - 
 MySQLParser_transcoding_name_return
      pMySQLParser->transcoding_name(pMySQLParser)
 *  - 
 MySQLParser_interval_unit_return
      pMySQLParser->interval_unit(pMySQLParser)
 *  - 
 MySQLParser_collation_names_return
      pMySQLParser->collation_names(pMySQLParser)
 *  - 
 MySQLParser_string_literal_return
      pMySQLParser->string_literal(pMySQLParser)
 *  - 
 MySQLParser_number_literal_return
      pMySQLParser->number_literal(pMySQLParser)
 *  - 
 MySQLParser_hex_literal_return
      pMySQLParser->hex_literal(pMySQLParser)
 *  - 
 MySQLParser_boolean_literal_return
      pMySQLParser->boolean_literal(pMySQLParser)
 *  - 
 MySQLParser_bit_literal_return
      pMySQLParser->bit_literal(pMySQLParser)
 *  - 
 MySQLParser_literal_value_return
      pMySQLParser->literal_value(pMySQLParser)
 *  - 
 MySQLParser_functionList_return
      pMySQLParser->functionList(pMySQLParser)
 *  - 
 MySQLParser_number_functions_return
      pMySQLParser->number_functions(pMySQLParser)
 *  - 
 MySQLParser_char_functions_return
      pMySQLParser->char_functions(pMySQLParser)
 *  - 
 MySQLParser_time_functions_return
      pMySQLParser->time_functions(pMySQLParser)
 *  - 
 MySQLParser_other_functions_return
      pMySQLParser->other_functions(pMySQLParser)
 *  - 
 MySQLParser_group_functions_return
      pMySQLParser->group_functions(pMySQLParser)
 *  - 
 MySQLParser_schema_name_return
      pMySQLParser->schema_name(pMySQLParser)
 *  - 
 MySQLParser_table_name_return
      pMySQLParser->table_name(pMySQLParser)
 *  - 
 MySQLParser_engine_name_return
      pMySQLParser->engine_name(pMySQLParser)
 *  - 
 MySQLParser_column_name_return
      pMySQLParser->column_name(pMySQLParser)
 *  - 
 MySQLParser_view_name_return
      pMySQLParser->view_name(pMySQLParser)
 *  - 
 MySQLParser_parser_name_return
      pMySQLParser->parser_name(pMySQLParser)
 *  - 
 MySQLParser_index_name_return
      pMySQLParser->index_name(pMySQLParser)
 *  - 
 MySQLParser_partition_name_return
      pMySQLParser->partition_name(pMySQLParser)
 *  - 
 MySQLParser_partition_logical_name_return
      pMySQLParser->partition_logical_name(pMySQLParser)
 *  - 
 MySQLParser_constraint_symbol_name_return
      pMySQLParser->constraint_symbol_name(pMySQLParser)
 *  - 
 MySQLParser_foreign_key_symbol_name_return
      pMySQLParser->foreign_key_symbol_name(pMySQLParser)
 *  - 
 MySQLParser_collation_name_return
      pMySQLParser->collation_name(pMySQLParser)
 *  - 
 MySQLParser_event_name_return
      pMySQLParser->event_name(pMySQLParser)
 *  - 
 MySQLParser_user_name_return
      pMySQLParser->user_name(pMySQLParser)
 *  - 
 MySQLParser_function_name_return
      pMySQLParser->function_name(pMySQLParser)
 *  - 
 MySQLParser_procedure_name_return
      pMySQLParser->procedure_name(pMySQLParser)
 *  - 
 MySQLParser_server_name_return
      pMySQLParser->server_name(pMySQLParser)
 *  - 
 MySQLParser_wrapper_name_return
      pMySQLParser->wrapper_name(pMySQLParser)
 *  - 
 MySQLParser_alias_return
      pMySQLParser->alias(pMySQLParser)
 *  - 
 MySQLParser_expression_return
      pMySQLParser->expression(pMySQLParser)
 *  - 
 MySQLParser_exp_factor1_return
      pMySQLParser->exp_factor1(pMySQLParser)
 *  - 
 MySQLParser_exp_factor2_return
      pMySQLParser->exp_factor2(pMySQLParser)
 *  - 
 MySQLParser_exp_factor3_return
      pMySQLParser->exp_factor3(pMySQLParser)
 *  - 
 MySQLParser_exp_factor4_return
      pMySQLParser->exp_factor4(pMySQLParser)
 *  - 
 MySQLParser_bool_primary_return
      pMySQLParser->bool_primary(pMySQLParser)
 *  - 
 MySQLParser_predicate_return
      pMySQLParser->predicate(pMySQLParser)
 *  - 
 MySQLParser_bit_expr_return
      pMySQLParser->bit_expr(pMySQLParser)
 *  - 
 MySQLParser_factor1_return
      pMySQLParser->factor1(pMySQLParser)
 *  - 
 MySQLParser_factor2_return
      pMySQLParser->factor2(pMySQLParser)
 *  - 
 MySQLParser_factor3_return
      pMySQLParser->factor3(pMySQLParser)
 *  - 
 MySQLParser_factor4_return
      pMySQLParser->factor4(pMySQLParser)
 *  - 
 MySQLParser_factor5_return
      pMySQLParser->factor5(pMySQLParser)
 *  - 
 MySQLParser_factor6_return
      pMySQLParser->factor6(pMySQLParser)
 *  - 
 MySQLParser_factor7_return
      pMySQLParser->factor7(pMySQLParser)
 *  - 
 MySQLParser_simple_expr_return
      pMySQLParser->simple_expr(pMySQLParser)
 *  - 
 MySQLParser_function_call_return
      pMySQLParser->function_call(pMySQLParser)
 *  - 
 MySQLParser_case_when_statement_return
      pMySQLParser->case_when_statement(pMySQLParser)
 *  - 
 MySQLParser_case_when_statement1_return
      pMySQLParser->case_when_statement1(pMySQLParser)
 *  - 
 MySQLParser_case_when_statement2_return
      pMySQLParser->case_when_statement2(pMySQLParser)
 *  - 
 MySQLParser_match_against_statement_return
      pMySQLParser->match_against_statement(pMySQLParser)
 *  - 
 MySQLParser_column_spec_return
      pMySQLParser->column_spec(pMySQLParser)
 *  - 
 MySQLParser_expression_list_return
      pMySQLParser->expression_list(pMySQLParser)
 *  - 
 MySQLParser_interval_expr_return
      pMySQLParser->interval_expr(pMySQLParser)
 *  - 
 MySQLParser_table_references_return
      pMySQLParser->table_references(pMySQLParser)
 *  - 
 MySQLParser_table_reference_return
      pMySQLParser->table_reference(pMySQLParser)
 *  - 
 MySQLParser_table_factor1_return
      pMySQLParser->table_factor1(pMySQLParser)
 *  - 
 MySQLParser_table_factor2_return
      pMySQLParser->table_factor2(pMySQLParser)
 *  - 
 MySQLParser_table_factor3_return
      pMySQLParser->table_factor3(pMySQLParser)
 *  - 
 MySQLParser_table_factor4_return
      pMySQLParser->table_factor4(pMySQLParser)
 *  - 
 MySQLParser_table_atom_return
      pMySQLParser->table_atom(pMySQLParser)
 *  - 
 MySQLParser_join_condition_return
      pMySQLParser->join_condition(pMySQLParser)
 *  - 
 MySQLParser_index_hint_list_return
      pMySQLParser->index_hint_list(pMySQLParser)
 *  - 
 MySQLParser_index_options_return
      pMySQLParser->index_options(pMySQLParser)
 *  - 
 MySQLParser_index_hint_return
      pMySQLParser->index_hint(pMySQLParser)
 *  - 
 MySQLParser_index_list_return
      pMySQLParser->index_list(pMySQLParser)
 *  - 
 MySQLParser_partition_clause_return
      pMySQLParser->partition_clause(pMySQLParser)
 *  - 
 MySQLParser_partition_names_return
      pMySQLParser->partition_names(pMySQLParser)
 *  - 
 MySQLParser_root_statement_return
      pMySQLParser->root_statement(pMySQLParser)
 *  - 
 MySQLParser_data_manipulation_statements_return
      pMySQLParser->data_manipulation_statements(pMySQLParser)
 *  - 
 MySQLParser_data_definition_statements_return
      pMySQLParser->data_definition_statements(pMySQLParser)
 *  - 
 MySQLParser_select_statement_return
      pMySQLParser->select_statement(pMySQLParser)
 *  - 
 MySQLParser_select_expression_return
      pMySQLParser->select_expression(pMySQLParser)
 *  - 
 MySQLParser_where_clause_return
      pMySQLParser->where_clause(pMySQLParser)
 *  - 
 MySQLParser_groupby_clause_return
      pMySQLParser->groupby_clause(pMySQLParser)
 *  - 
 MySQLParser_groupby_item_return
      pMySQLParser->groupby_item(pMySQLParser)
 *  - 
 MySQLParser_having_clause_return
      pMySQLParser->having_clause(pMySQLParser)
 *  - 
 MySQLParser_orderby_clause_return
      pMySQLParser->orderby_clause(pMySQLParser)
 *  - 
 MySQLParser_orderby_item_return
      pMySQLParser->orderby_item(pMySQLParser)
 *  - 
 MySQLParser_limit_clause_return
      pMySQLParser->limit_clause(pMySQLParser)
 *  - 
 MySQLParser_offset_return
      pMySQLParser->offset(pMySQLParser)
 *  - 
 MySQLParser_row_count_return
      pMySQLParser->row_count(pMySQLParser)
 *  - 
 MySQLParser_select_list_return
      pMySQLParser->select_list(pMySQLParser)
 *  - 
 MySQLParser_column_list_return
      pMySQLParser->column_list(pMySQLParser)
 *  - 
 MySQLParser_subquery_return
      pMySQLParser->subquery(pMySQLParser)
 *  - 
 MySQLParser_table_spec_return
      pMySQLParser->table_spec(pMySQLParser)
 *  - 
 MySQLParser_displayed_column_return
      pMySQLParser->displayed_column(pMySQLParser)
 *  - 
 MySQLParser_delete_statements_return
      pMySQLParser->delete_statements(pMySQLParser)
 *  - 
 MySQLParser_delete_single_table_statement_return
      pMySQLParser->delete_single_table_statement(pMySQLParser)
 *  - 
 MySQLParser_delete_multiple_table_statement1_return
      pMySQLParser->delete_multiple_table_statement1(pMySQLParser)
 *  - 
 MySQLParser_delete_multiple_table_statement2_return
      pMySQLParser->delete_multiple_table_statement2(pMySQLParser)
 *  - 
 MySQLParser_insert_statements_return
      pMySQLParser->insert_statements(pMySQLParser)
 *  - 
 MySQLParser_insert_header_return
      pMySQLParser->insert_header(pMySQLParser)
 *  - 
 MySQLParser_insert_subfix_return
      pMySQLParser->insert_subfix(pMySQLParser)
 *  - 
 MySQLParser_insert_statement1_return
      pMySQLParser->insert_statement1(pMySQLParser)
 *  - 
 MySQLParser_value_list_clause_return
      pMySQLParser->value_list_clause(pMySQLParser)
 *  - 
 MySQLParser_column_value_list_return
      pMySQLParser->column_value_list(pMySQLParser)
 *  - 
 MySQLParser_insert_statement2_return
      pMySQLParser->insert_statement2(pMySQLParser)
 *  - 
 MySQLParser_set_columns_cluase_return
      pMySQLParser->set_columns_cluase(pMySQLParser)
 *  - 
 MySQLParser_set_column_cluase_return
      pMySQLParser->set_column_cluase(pMySQLParser)
 *  - 
 MySQLParser_insert_statement3_return
      pMySQLParser->insert_statement3(pMySQLParser)
 *  - 
 MySQLParser_update_statements_return
      pMySQLParser->update_statements(pMySQLParser)
 *  - 
 MySQLParser_single_table_update_statement_return
      pMySQLParser->single_table_update_statement(pMySQLParser)
 *  - 
 MySQLParser_multiple_table_update_statement_return
      pMySQLParser->multiple_table_update_statement(pMySQLParser)
 *  - 
 MySQLParser_call_statement_return
      pMySQLParser->call_statement(pMySQLParser)
 *  - 
 MySQLParser_do_statement_return
      pMySQLParser->do_statement(pMySQLParser)
 *  - 
 MySQLParser_handler_statements_return
      pMySQLParser->handler_statements(pMySQLParser)
 *  - 
 MySQLParser_open_handler_statement_return
      pMySQLParser->open_handler_statement(pMySQLParser)
 *  - 
 MySQLParser_handler_statement1_return
      pMySQLParser->handler_statement1(pMySQLParser)
 *  - 
 MySQLParser_handler_statement2_return
      pMySQLParser->handler_statement2(pMySQLParser)
 *  - 
 MySQLParser_handler_statement3_return
      pMySQLParser->handler_statement3(pMySQLParser)
 *  - 
 MySQLParser_close_handler_statement_return
      pMySQLParser->close_handler_statement(pMySQLParser)
 *  - 
 MySQLParser_load_data_statement_return
      pMySQLParser->load_data_statement(pMySQLParser)
 *  - 
 MySQLParser_load_xml_statement_return
      pMySQLParser->load_xml_statement(pMySQLParser)
 *  - 
 MySQLParser_replace_statement_return
      pMySQLParser->replace_statement(pMySQLParser)
 *  - 
 MySQLParser_replace_statement_header_return
      pMySQLParser->replace_statement_header(pMySQLParser)
 *  - 
 MySQLParser_replace_statement1_return
      pMySQLParser->replace_statement1(pMySQLParser)
 *  - 
 MySQLParser_replace_statement2_return
      pMySQLParser->replace_statement2(pMySQLParser)
 *  - 
 MySQLParser_replace_statement3_return
      pMySQLParser->replace_statement3(pMySQLParser)
 *  - 
 MySQLParser_create_database_statement_return
      pMySQLParser->create_database_statement(pMySQLParser)
 *  - 
 MySQLParser_create_specification_return
      pMySQLParser->create_specification(pMySQLParser)
 *  - 
 MySQLParser_alter_database_statements_return
      pMySQLParser->alter_database_statements(pMySQLParser)
 *  - 
 MySQLParser_alter_database_statement1_return
      pMySQLParser->alter_database_statement1(pMySQLParser)
 *  - 
 MySQLParser_alter_database_statement2_return
      pMySQLParser->alter_database_statement2(pMySQLParser)
 *  - 
 MySQLParser_alter_database_specification_return
      pMySQLParser->alter_database_specification(pMySQLParser)
 *  - 
 MySQLParser_drop_database_statement_return
      pMySQLParser->drop_database_statement(pMySQLParser)
 *  - 
 MySQLParser_create_event_statement_return
      pMySQLParser->create_event_statement(pMySQLParser)
 *  - 
 MySQLParser_schedule_definition_return
      pMySQLParser->schedule_definition(pMySQLParser)
 *  - 
 MySQLParser_interval_return
      pMySQLParser->interval(pMySQLParser)
 *  - 
 MySQLParser_timestamp_return
      pMySQLParser->timestamp(pMySQLParser)
 *  - 
 MySQLParser_alter_event_statement_return
      pMySQLParser->alter_event_statement(pMySQLParser)
 *  - 
 MySQLParser_drop_event_statement_return
      pMySQLParser->drop_event_statement(pMySQLParser)
 *  - 
 MySQLParser_create_index_statement_return
      pMySQLParser->create_index_statement(pMySQLParser)
 *  - 
 MySQLParser_algorithm_option_return
      pMySQLParser->algorithm_option(pMySQLParser)
 *  - 
 MySQLParser_lock_option_return
      pMySQLParser->lock_option(pMySQLParser)
 *  - 
 MySQLParser_drop_index_statement_return
      pMySQLParser->drop_index_statement(pMySQLParser)
 *  - 
 MySQLParser_create_server_statement_return
      pMySQLParser->create_server_statement(pMySQLParser)
 *  - 
 MySQLParser_create_server_option_return
      pMySQLParser->create_server_option(pMySQLParser)
 *  - 
 MySQLParser_alter_server_statement_return
      pMySQLParser->alter_server_statement(pMySQLParser)
 *  - 
 MySQLParser_alter_server_option_return
      pMySQLParser->alter_server_option(pMySQLParser)
 *  - 
 MySQLParser_drop_server_statement_return
      pMySQLParser->drop_server_statement(pMySQLParser)
 *  - 
 MySQLParser_create_table_statement_return
      pMySQLParser->create_table_statement(pMySQLParser)
 *  - 
 MySQLParser_create_table_statement1_return
      pMySQLParser->create_table_statement1(pMySQLParser)
 *  - 
 MySQLParser_create_table_statement2_return
      pMySQLParser->create_table_statement2(pMySQLParser)
 *  - 
 MySQLParser_create_table_statement3_return
      pMySQLParser->create_table_statement3(pMySQLParser)
 *  - 
 MySQLParser_create_definition_return
      pMySQLParser->create_definition(pMySQLParser)
 *  - 
 MySQLParser_column_definition_return
      pMySQLParser->column_definition(pMySQLParser)
 *  - 
 MySQLParser_null_or_notnull_return
      pMySQLParser->null_or_notnull(pMySQLParser)
 *  - 
 MySQLParser_column_data_type_header_return
      pMySQLParser->column_data_type_header(pMySQLParser)
 *  - 
 MySQLParser_index_column_name_return
      pMySQLParser->index_column_name(pMySQLParser)
 *  - 
 MySQLParser_reference_definition_return
      pMySQLParser->reference_definition(pMySQLParser)
 *  - 
 MySQLParser_reference_option_return
      pMySQLParser->reference_option(pMySQLParser)
 *  - 
 MySQLParser_table_options_return
      pMySQLParser->table_options(pMySQLParser)
 *  - 
 MySQLParser_table_option_return
      pMySQLParser->table_option(pMySQLParser)
 *  - 
 MySQLParser_partition_options_return
      pMySQLParser->partition_options(pMySQLParser)
 *  - 
 MySQLParser_partition_definition_return
      pMySQLParser->partition_definition(pMySQLParser)
 *  - 
 MySQLParser_subpartition_definition_return
      pMySQLParser->subpartition_definition(pMySQLParser)
 *  - 
 MySQLParser_length_return
      pMySQLParser->length(pMySQLParser)
 *  - 
 MySQLParser_alter_table_statement_return
      pMySQLParser->alter_table_statement(pMySQLParser)
 *  - 
 MySQLParser_alter_table_specification_return
      pMySQLParser->alter_table_specification(pMySQLParser)
 *  - 
 MySQLParser_index_column_names_return
      pMySQLParser->index_column_names(pMySQLParser)
 *  - 
 MySQLParser_index_type_return
      pMySQLParser->index_type(pMySQLParser)
 *  - 
 MySQLParser_index_option_return
      pMySQLParser->index_option(pMySQLParser)
 *  - 
 MySQLParser_column_definitions_return
      pMySQLParser->column_definitions(pMySQLParser)
 *  - 
 MySQLParser_rename_table_statement_return
      pMySQLParser->rename_table_statement(pMySQLParser)
 *  - 
 MySQLParser_drop_table_statement_return
      pMySQLParser->drop_table_statement(pMySQLParser)
 *  - 
 MySQLParser_truncate_table_statement_return
      pMySQLParser->truncate_table_statement(pMySQLParser)
 *  - 
 MySQLParser_create_view_statement_return
      pMySQLParser->create_view_statement(pMySQLParser)
 *  - 
 MySQLParser_create_view_body_return
      pMySQLParser->create_view_body(pMySQLParser)
 *  - 
 MySQLParser_alter_view_statement_return
      pMySQLParser->alter_view_statement(pMySQLParser)
 *  - 
 MySQLParser_drop_view_statement_return
      pMySQLParser->drop_view_statement(pMySQLParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MySQLParser_H
#define _MySQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MySQLParser_Ctx_struct MySQLParser, * pMySQLParser;





#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct MySQLParser_relational_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_relational_op_return;



typedef struct MySQLParser_charset_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_charset_name_return;



typedef struct MySQLParser_cast_data_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cast_data_type_return;



typedef struct MySQLParser_search_modifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_search_modifier_return;



typedef struct MySQLParser_transcoding_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_transcoding_name_return;



typedef struct MySQLParser_interval_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_unit_return;



typedef struct MySQLParser_collation_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_collation_names_return;



typedef struct MySQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_string_literal_return;



typedef struct MySQLParser_number_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_number_literal_return;



typedef struct MySQLParser_hex_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_hex_literal_return;



typedef struct MySQLParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_boolean_literal_return;



typedef struct MySQLParser_bit_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bit_literal_return;



typedef struct MySQLParser_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_literal_value_return;



typedef struct MySQLParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_functionList_return;



typedef struct MySQLParser_number_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_number_functions_return;



typedef struct MySQLParser_char_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_char_functions_return;



typedef struct MySQLParser_time_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_time_functions_return;



typedef struct MySQLParser_other_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_other_functions_return;



typedef struct MySQLParser_group_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_group_functions_return;



typedef struct MySQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_schema_name_return;



typedef struct MySQLParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_name_return;



typedef struct MySQLParser_engine_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_engine_name_return;



typedef struct MySQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_name_return;



typedef struct MySQLParser_view_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_view_name_return;



typedef struct MySQLParser_parser_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_parser_name_return;



typedef struct MySQLParser_index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_name_return;



typedef struct MySQLParser_partition_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_name_return;



typedef struct MySQLParser_partition_logical_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_logical_name_return;



typedef struct MySQLParser_constraint_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_constraint_symbol_name_return;



typedef struct MySQLParser_foreign_key_symbol_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_foreign_key_symbol_name_return;



typedef struct MySQLParser_collation_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_collation_name_return;



typedef struct MySQLParser_event_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_event_name_return;



typedef struct MySQLParser_user_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_user_name_return;



typedef struct MySQLParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_function_name_return;



typedef struct MySQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_procedure_name_return;



typedef struct MySQLParser_server_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_server_name_return;



typedef struct MySQLParser_wrapper_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_wrapper_name_return;



typedef struct MySQLParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alias_return;



typedef struct MySQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_return;



typedef struct MySQLParser_exp_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_exp_factor1_return;



typedef struct MySQLParser_exp_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_exp_factor2_return;



typedef struct MySQLParser_exp_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_exp_factor3_return;



typedef struct MySQLParser_exp_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_exp_factor4_return;



typedef struct MySQLParser_bool_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bool_primary_return;



typedef struct MySQLParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_predicate_return;



typedef struct MySQLParser_bit_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bit_expr_return;



typedef struct MySQLParser_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor1_return;



typedef struct MySQLParser_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor2_return;



typedef struct MySQLParser_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor3_return;



typedef struct MySQLParser_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor4_return;



typedef struct MySQLParser_factor5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor5_return;



typedef struct MySQLParser_factor6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor6_return;



typedef struct MySQLParser_factor7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_factor7_return;



typedef struct MySQLParser_simple_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_simple_expr_return;



typedef struct MySQLParser_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_function_call_return;



typedef struct MySQLParser_case_when_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_case_when_statement_return;



typedef struct MySQLParser_case_when_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_case_when_statement1_return;



typedef struct MySQLParser_case_when_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_case_when_statement2_return;



typedef struct MySQLParser_match_against_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_match_against_statement_return;



typedef struct MySQLParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_spec_return;



typedef struct MySQLParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_list_return;



typedef struct MySQLParser_interval_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_expr_return;



typedef struct MySQLParser_table_references_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_references_return;



typedef struct MySQLParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_reference_return;



typedef struct MySQLParser_table_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_factor1_return;



typedef struct MySQLParser_table_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_factor2_return;



typedef struct MySQLParser_table_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_factor3_return;



typedef struct MySQLParser_table_factor4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_factor4_return;



typedef struct MySQLParser_table_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_atom_return;



typedef struct MySQLParser_join_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_join_condition_return;



typedef struct MySQLParser_index_hint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_hint_list_return;



typedef struct MySQLParser_index_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_options_return;



typedef struct MySQLParser_index_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_hint_return;



typedef struct MySQLParser_index_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_list_return;



typedef struct MySQLParser_partition_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_clause_return;



typedef struct MySQLParser_partition_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_names_return;



typedef struct MySQLParser_root_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_root_statement_return;



typedef struct MySQLParser_data_manipulation_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_data_manipulation_statements_return;



typedef struct MySQLParser_data_definition_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_data_definition_statements_return;



typedef struct MySQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_statement_return;



typedef struct MySQLParser_select_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_expression_return;



typedef struct MySQLParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_where_clause_return;



typedef struct MySQLParser_groupby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_groupby_clause_return;



typedef struct MySQLParser_groupby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_groupby_item_return;



typedef struct MySQLParser_having_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_having_clause_return;



typedef struct MySQLParser_orderby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_orderby_clause_return;



typedef struct MySQLParser_orderby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_orderby_item_return;



typedef struct MySQLParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_limit_clause_return;



typedef struct MySQLParser_offset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_offset_return;



typedef struct MySQLParser_row_count_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_row_count_return;



typedef struct MySQLParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_list_return;



typedef struct MySQLParser_column_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_list_return;



typedef struct MySQLParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_subquery_return;



typedef struct MySQLParser_table_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_spec_return;



typedef struct MySQLParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_displayed_column_return;



typedef struct MySQLParser_delete_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_delete_statements_return;



typedef struct MySQLParser_delete_single_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_delete_single_table_statement_return;



typedef struct MySQLParser_delete_multiple_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_delete_multiple_table_statement1_return;



typedef struct MySQLParser_delete_multiple_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_delete_multiple_table_statement2_return;



typedef struct MySQLParser_insert_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_statements_return;



typedef struct MySQLParser_insert_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_header_return;



typedef struct MySQLParser_insert_subfix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_subfix_return;



typedef struct MySQLParser_insert_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_statement1_return;



typedef struct MySQLParser_value_list_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_value_list_clause_return;



typedef struct MySQLParser_column_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_value_list_return;



typedef struct MySQLParser_insert_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_statement2_return;



typedef struct MySQLParser_set_columns_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_set_columns_cluase_return;



typedef struct MySQLParser_set_column_cluase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_set_column_cluase_return;



typedef struct MySQLParser_insert_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_statement3_return;



typedef struct MySQLParser_update_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_update_statements_return;



typedef struct MySQLParser_single_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_single_table_update_statement_return;



typedef struct MySQLParser_multiple_table_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_multiple_table_update_statement_return;



typedef struct MySQLParser_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_call_statement_return;



typedef struct MySQLParser_do_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_do_statement_return;



typedef struct MySQLParser_handler_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_statements_return;



typedef struct MySQLParser_open_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_open_handler_statement_return;



typedef struct MySQLParser_handler_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_statement1_return;



typedef struct MySQLParser_handler_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_statement2_return;



typedef struct MySQLParser_handler_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_statement3_return;



typedef struct MySQLParser_close_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_close_handler_statement_return;



typedef struct MySQLParser_load_data_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_data_statement_return;



typedef struct MySQLParser_load_xml_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_xml_statement_return;



typedef struct MySQLParser_replace_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replace_statement_return;



typedef struct MySQLParser_replace_statement_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replace_statement_header_return;



typedef struct MySQLParser_replace_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replace_statement1_return;



typedef struct MySQLParser_replace_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replace_statement2_return;



typedef struct MySQLParser_replace_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replace_statement3_return;



typedef struct MySQLParser_create_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_database_statement_return;



typedef struct MySQLParser_create_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_specification_return;



typedef struct MySQLParser_alter_database_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_database_statements_return;



typedef struct MySQLParser_alter_database_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_database_statement1_return;



typedef struct MySQLParser_alter_database_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_database_statement2_return;



typedef struct MySQLParser_alter_database_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_database_specification_return;



typedef struct MySQLParser_drop_database_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_database_statement_return;



typedef struct MySQLParser_create_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_event_statement_return;



typedef struct MySQLParser_schedule_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_schedule_definition_return;



typedef struct MySQLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_return;



typedef struct MySQLParser_timestamp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_timestamp_return;



typedef struct MySQLParser_alter_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_event_statement_return;



typedef struct MySQLParser_drop_event_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_event_statement_return;



typedef struct MySQLParser_create_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_index_statement_return;



typedef struct MySQLParser_algorithm_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_algorithm_option_return;



typedef struct MySQLParser_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_lock_option_return;



typedef struct MySQLParser_drop_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_index_statement_return;



typedef struct MySQLParser_create_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_server_statement_return;



typedef struct MySQLParser_create_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_server_option_return;



typedef struct MySQLParser_alter_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_server_statement_return;



typedef struct MySQLParser_alter_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_server_option_return;



typedef struct MySQLParser_drop_server_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_server_statement_return;



typedef struct MySQLParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_statement_return;



typedef struct MySQLParser_create_table_statement1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_statement1_return;



typedef struct MySQLParser_create_table_statement2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_statement2_return;



typedef struct MySQLParser_create_table_statement3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_statement3_return;



typedef struct MySQLParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_definition_return;



typedef struct MySQLParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_definition_return;



typedef struct MySQLParser_null_or_notnull_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_null_or_notnull_return;



typedef struct MySQLParser_column_data_type_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_data_type_header_return;



typedef struct MySQLParser_index_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_column_name_return;



typedef struct MySQLParser_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_reference_definition_return;



typedef struct MySQLParser_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_reference_option_return;



typedef struct MySQLParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_options_return;



typedef struct MySQLParser_table_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_option_return;



typedef struct MySQLParser_partition_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_options_return;



typedef struct MySQLParser_partition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_definition_return;



typedef struct MySQLParser_subpartition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_subpartition_definition_return;



typedef struct MySQLParser_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_length_return;



typedef struct MySQLParser_alter_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_statement_return;



typedef struct MySQLParser_alter_table_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_specification_return;



typedef struct MySQLParser_index_column_names_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_column_names_return;



typedef struct MySQLParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_type_return;



typedef struct MySQLParser_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_option_return;



typedef struct MySQLParser_column_definitions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_definitions_return;



typedef struct MySQLParser_rename_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_rename_table_statement_return;



typedef struct MySQLParser_drop_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_table_statement_return;



typedef struct MySQLParser_truncate_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_truncate_table_statement_return;



typedef struct MySQLParser_create_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_view_statement_return;



typedef struct MySQLParser_create_view_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_view_body_return;



typedef struct MySQLParser_alter_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_view_statement_return;



typedef struct MySQLParser_drop_view_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_view_statement_return;




/** Context tracking structure for 
MySQLParser

 */
struct MySQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     MySQLParser_relational_op_return
     (*relational_op)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_charset_name_return
     (*charset_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cast_data_type_return
     (*cast_data_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_search_modifier_return
     (*search_modifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_transcoding_name_return
     (*transcoding_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_unit_return
     (*interval_unit)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_collation_names_return
     (*collation_names)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_string_literal_return
     (*string_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_number_literal_return
     (*number_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_hex_literal_return
     (*hex_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_boolean_literal_return
     (*boolean_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bit_literal_return
     (*bit_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_literal_value_return
     (*literal_value)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_functionList_return
     (*functionList)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_number_functions_return
     (*number_functions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_char_functions_return
     (*char_functions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_time_functions_return
     (*time_functions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_other_functions_return
     (*other_functions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_group_functions_return
     (*group_functions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_schema_name_return
     (*schema_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_name_return
     (*table_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_engine_name_return
     (*engine_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_name_return
     (*column_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_view_name_return
     (*view_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_parser_name_return
     (*parser_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_name_return
     (*index_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_name_return
     (*partition_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_logical_name_return
     (*partition_logical_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_constraint_symbol_name_return
     (*constraint_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_foreign_key_symbol_name_return
     (*foreign_key_symbol_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_collation_name_return
     (*collation_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_event_name_return
     (*event_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_user_name_return
     (*user_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_function_name_return
     (*function_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_procedure_name_return
     (*procedure_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_server_name_return
     (*server_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_wrapper_name_return
     (*wrapper_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alias_return
     (*alias)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_return
     (*expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_exp_factor1_return
     (*exp_factor1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_exp_factor2_return
     (*exp_factor2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_exp_factor3_return
     (*exp_factor3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_exp_factor4_return
     (*exp_factor4)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bool_primary_return
     (*bool_primary)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_predicate_return
     (*predicate)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bit_expr_return
     (*bit_expr)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor1_return
     (*factor1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor2_return
     (*factor2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor3_return
     (*factor3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor4_return
     (*factor4)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor5_return
     (*factor5)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor6_return
     (*factor6)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_factor7_return
     (*factor7)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_simple_expr_return
     (*simple_expr)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_function_call_return
     (*function_call)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_case_when_statement_return
     (*case_when_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_case_when_statement1_return
     (*case_when_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_case_when_statement2_return
     (*case_when_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_match_against_statement_return
     (*match_against_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_spec_return
     (*column_spec)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_list_return
     (*expression_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_expr_return
     (*interval_expr)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_references_return
     (*table_references)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_reference_return
     (*table_reference)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_factor1_return
     (*table_factor1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_factor2_return
     (*table_factor2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_factor3_return
     (*table_factor3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_factor4_return
     (*table_factor4)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_atom_return
     (*table_atom)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_join_condition_return
     (*join_condition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_hint_list_return
     (*index_hint_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_options_return
     (*index_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_hint_return
     (*index_hint)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_list_return
     (*index_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_clause_return
     (*partition_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_names_return
     (*partition_names)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_root_statement_return
     (*root_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_data_manipulation_statements_return
     (*data_manipulation_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_data_definition_statements_return
     (*data_definition_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_statement_return
     (*select_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_expression_return
     (*select_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_where_clause_return
     (*where_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_groupby_clause_return
     (*groupby_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_groupby_item_return
     (*groupby_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_having_clause_return
     (*having_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_orderby_clause_return
     (*orderby_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_orderby_item_return
     (*orderby_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_limit_clause_return
     (*limit_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_offset_return
     (*offset)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_row_count_return
     (*row_count)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_list_return
     (*select_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_list_return
     (*column_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_subquery_return
     (*subquery)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_spec_return
     (*table_spec)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_displayed_column_return
     (*displayed_column)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_delete_statements_return
     (*delete_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_delete_single_table_statement_return
     (*delete_single_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_delete_multiple_table_statement1_return
     (*delete_multiple_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_delete_multiple_table_statement2_return
     (*delete_multiple_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_statements_return
     (*insert_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_header_return
     (*insert_header)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_subfix_return
     (*insert_subfix)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_statement1_return
     (*insert_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_value_list_clause_return
     (*value_list_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_value_list_return
     (*column_value_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_statement2_return
     (*insert_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_set_columns_cluase_return
     (*set_columns_cluase)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_set_column_cluase_return
     (*set_column_cluase)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_statement3_return
     (*insert_statement3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_update_statements_return
     (*update_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_single_table_update_statement_return
     (*single_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_multiple_table_update_statement_return
     (*multiple_table_update_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_call_statement_return
     (*call_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_do_statement_return
     (*do_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_statements_return
     (*handler_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_open_handler_statement_return
     (*open_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_statement1_return
     (*handler_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_statement2_return
     (*handler_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_statement3_return
     (*handler_statement3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_close_handler_statement_return
     (*close_handler_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_data_statement_return
     (*load_data_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_xml_statement_return
     (*load_xml_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replace_statement_return
     (*replace_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replace_statement_header_return
     (*replace_statement_header)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replace_statement1_return
     (*replace_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replace_statement2_return
     (*replace_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replace_statement3_return
     (*replace_statement3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_database_statement_return
     (*create_database_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_specification_return
     (*create_specification)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_database_statements_return
     (*alter_database_statements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_database_statement1_return
     (*alter_database_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_database_statement2_return
     (*alter_database_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_database_specification_return
     (*alter_database_specification)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_database_statement_return
     (*drop_database_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_event_statement_return
     (*create_event_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_schedule_definition_return
     (*schedule_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_return
     (*interval)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_timestamp_return
     (*timestamp)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_event_statement_return
     (*alter_event_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_event_statement_return
     (*drop_event_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_index_statement_return
     (*create_index_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_algorithm_option_return
     (*algorithm_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_lock_option_return
     (*lock_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_index_statement_return
     (*drop_index_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_server_statement_return
     (*create_server_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_server_option_return
     (*create_server_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_server_statement_return
     (*alter_server_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_server_option_return
     (*alter_server_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_server_statement_return
     (*drop_server_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_statement_return
     (*create_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_statement1_return
     (*create_table_statement1)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_statement2_return
     (*create_table_statement2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_statement3_return
     (*create_table_statement3)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_definition_return
     (*create_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_definition_return
     (*column_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_null_or_notnull_return
     (*null_or_notnull)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_data_type_header_return
     (*column_data_type_header)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_column_name_return
     (*index_column_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_reference_definition_return
     (*reference_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_reference_option_return
     (*reference_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_options_return
     (*table_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_option_return
     (*table_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_options_return
     (*partition_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_definition_return
     (*partition_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_subpartition_definition_return
     (*subpartition_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_length_return
     (*length)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_statement_return
     (*alter_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_specification_return
     (*alter_table_specification)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_column_names_return
     (*index_column_names)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_type_return
     (*index_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_option_return
     (*index_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_definitions_return
     (*column_definitions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_rename_table_statement_return
     (*rename_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_table_statement_return
     (*drop_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_truncate_table_statement_return
     (*truncate_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_view_statement_return
     (*create_view_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_view_body_return
     (*create_view_body)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_view_statement_return
     (*alter_view_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_view_statement_return
     (*drop_view_statement)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred54_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred55_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred87_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred268_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred269_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred270_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred271_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred274_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred275_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred278_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred280_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred283_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred285_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred286_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred288_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred289_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred291_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred292_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred293_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred295_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred297_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred301_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred303_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred307_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred324_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred325_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred335_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred340_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred343_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred345_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred349_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred354_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred373_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred425_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred426_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred432_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred438_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred469_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred470_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred474_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred477_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred489_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred858_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred963_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1042_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MySQLParser_Ctx_struct * ctx);
    void	    (*free)   (struct MySQLParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMySQLParser MySQLParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pMySQLParser MySQLParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ABS      4
#define ACCESSIBLE_SYM      5
#define ACOS      6
#define ACTION      7
#define ADDDATE      8
#define ADDTIME      9
#define ADD_SYM      10
#define AES_DECRYPT      11
#define AES_ENCRYPT      12
#define AFTER_SYM      13
#define AGAINST      14
#define AGGREGATE_SYM      15
#define ALGORITHM_SYM      16
#define ALL      17
#define ALL_FIELDS      18
#define ALTER      19
#define ANALYZE_SYM      20
#define AND_SYM      21
#define ANY      22
#define ARMSCII8      23
#define ARROW      24
#define ASC      25
#define ASCII_SYM      26
#define ASENSITIVE_SYM      27
#define ASIN      28
#define ASTERISK      29
#define AS_SYM      30
#define ATAN      31
#define ATAN2      32
#define AT_SYM      33
#define AUTHORS_SYM      34
#define AUTOEXTEND_SIZE_SYM      35
#define AUTO_INCREMENT      36
#define AVG      37
#define AVG_ROW_LENGTH      38
#define A_      39
#define BACKUP_SYM      40
#define BEFORE_SYM      41
#define BEGIN_SYM      42
#define BENCHMARK      43
#define BETWEEN      44
#define BIG5      45
#define BIGINT      46
#define BIN      47
#define BINARY      48
#define BINLOG_SYM      49
#define BITAND      50
#define BIT_AND      51
#define BIT_LENGTH      52
#define BIT_NUM      53
#define BIT_OR      54
#define BIT_SYM      55
#define BIT_XOR      56
#define BLOB_SYM      57
#define BLOCK_SYM      58
#define BOOLEAN_SYM      59
#define BOOL_SYM      60
#define BOTH      61
#define BTREE_SYM      62
#define BYTE_SYM      63
#define BY_SYM      64
#define B_      65
#define CACHE_SYM      66
#define CALL_SYM      67
#define CASCADE      68
#define CASCADED      69
#define CASE_SYM      70
#define CAST_SYM      71
#define CEIL      72
#define CEILING      73
#define CHAIN_SYM      74
#define CHANGE      75
#define CHANGED      76
#define CHAR      77
#define CHARACTER_SYM      78
#define CHARSET      79
#define CHAR_LENGTH      80
#define CHECKSUM_SYM      81
#define CHECK_SYM      82
#define CIPHER_SYM      83
#define CLIENT_SYM      84
#define CLOSE_SYM      85
#define COALESCE      86
#define CODE_SYM      87
#define COERCIBILITY      88
#define COLLATE_SYM      89
#define COLLATION      90
#define COLON      91
#define COLUMNS_SYM      92
#define COLUMN_FORMAT      93
#define COLUMN_SYM      94
#define COMMA      95
#define COMMENT_SYM      96
#define COMMITTED_SYM      97
#define COMMIT_SYM      98
#define COMPACT_SYM      99
#define COMPLETION_SYM      100
#define COMPRESS      101
#define COMPRESSED_SYM      102
#define CONCAT      103
#define CONCAT_WS      104
#define CONCURRENT      105
#define CONDITION_SYM      106
#define CONNECTION_ID      107
#define CONNECTION_SYM      108
#define CONSISTENT_SYM      109
#define CONSTRAINT      110
#define CONTAINS_SYM      111
#define CONTEXT_SYM      112
#define CONTINUE_SYM      113
#define CONTRIBUTORS_SYM      114
#define CONV      115
#define CONVERT_SYM      116
#define CONVERT_TZ      117
#define COPY_SYM      118
#define COS      119
#define COT      120
#define COUNT      121
#define CP1250      122
#define CP1251      123
#define CP1256      124
#define CP1257      125
#define CP850      126
#define CP852      127
#define CP866      128
#define CP932      129
#define CPU_SYM      130
#define CRC32      131
#define CREATE      132
#define CROSECOND      133
#define CROSS      134
#define CUBE_SYM      135
#define CURDATE      136
#define CURRENT_TIMESTAMP      137
#define CURRENT_USER      138
#define CURSOR_SYM      139
#define CURTIME      140
#define C_      141
#define DATABASE      142
#define DATAFILE_SYM      143
#define DATA_SYM      144
#define DATEDIFF      145
#define DATETIME      146
#define DATE_ADD      147
#define DATE_FORMAT      148
#define DATE_SUB      149
#define DATE_SYM      150
#define DAYNAME      151
#define DAYOFMONTH      152
#define DAYOFWEEK      153
#define DAYOFYEAR      154
#define DAY_HOUR      155
#define DAY_MICROSECOND      156
#define DAY_MINUTE      157
#define DAY_SECOND      158
#define DAY_SYM      159
#define DEALLOCATE_SYM      160
#define DEC8      161
#define DECIMAL_SYM      162
#define DECLARE_SYM      163
#define DECODE      164
#define DEFAULT      165
#define DEFINER      166
#define DEGREES      167
#define DELAYED_SYM      168
#define DELAY_KEY_WRITE_SYM      169
#define DELETE_SYM      170
#define DESC      171
#define DES_DECRYPT      172
#define DES_ENCRYPT      173
#define DES_KEY_FILE      174
#define DETERMINISTIC_SYM      175
#define DIRECTORY_SYM      176
#define DISABLE_SYM      177
#define DISCARD      178
#define DISK_SYM      179
#define DISTINCT      180
#define DISTINCTROW      181
#define DIVIDE      182
#define DOT      183
#define DOUBLE_SYM      184
#define DO_SYM      185
#define DROP      186
#define DUAL_SYM      187
#define DUMPFILE      188
#define DUPLICATE_SYM      189
#define DYNAMIC_SYM      190
#define D_      191
#define EACH_SYM      192
#define ELSE_SYM      193
#define ELSIF_SYM      194
#define ELT      195
#define ENABLE_SYM      196
#define ENCLOSED      197
#define ENCODE      198
#define ENCRYPT      199
#define ENDS_SYM      200
#define END_SYM      201
#define ENGINES_SYM      202
#define ENGINE_SYM      203
#define ENUM      204
#define EQ_SYM      205
#define ERRORS      206
#define ESCAPED      207
#define ESCAPE_SYM      208
#define EUCJPMS      209
#define EUCKR      210
#define EVENTS_SYM      211
#define EVENT_SYM      212
#define EVERY_SYM      213
#define EXCHANGE_SYM      214
#define EXCLUSIVE_SYM      215
#define EXECUTE_SYM      216
#define EXISTS      217
#define EXIT_SYM      218
#define EXP      219
#define EXPANSION_SYM      220
#define EXPORT_SET      221
#define EXTENDED_SYM      222
#define EXTENT_SIZE_SYM      223
#define EXTRACT      224
#define E_      225
#define FALSE_SYM      226
#define FAST_SYM      227
#define FAULTS_SYM      228
#define FETCH_SYM      229
#define FIELD      230
#define FIELDS_SYM      231
#define FILE_SYM      232
#define FIND_IN_SET      233
#define FIRST_SYM      234
#define FIXED_SYM      235
#define FLOAT_SYM      236
#define FLOOR      237
#define FLUSH_SYM      238
#define FORCE_SYM      239
#define FOREIGN      240
#define FORMAT      241
#define FOR_SYM      242
#define FOUND_ROWS      243
#define FOUND_SYM      244
#define FROM      245
#define FROM_BASE64      246
#define FROM_DAYS      247
#define FROM_UNIXTIME      248
#define FULL      249
#define FULLTEXT_SYM      250
#define FUNCTION_SYM      251
#define F_      252
#define GB2312      253
#define GBK      254
#define GEOMETRYCOLLECTION      255
#define GEOMETRY_SYM      256
#define GEOSTD8      257
#define GET      258
#define GET_FORMAT      259
#define GET_LOCK      260
#define GLOBAL_SYM      261
#define GRANT      262
#define GRANTS      263
#define GREEK      264
#define GROUP_CONCAT      265
#define GROUP_SYM      266
#define GTH      267
#define G_      268
#define HANDLER_SYM      269
#define HASH_SYM      270
#define HAVING      271
#define HEBREW      272
#define HELP_SYM      273
#define HEX      274
#define HEX_DIGIT      275
#define HEX_DIGIT_FRAGMENT      276
#define HIGH_PRIORITY      277
#define HOSTS_SYM      278
#define HOST_SYM      279
#define HOUR      280
#define HOUR_MICROSECOND      281
#define HOUR_MINUTE      282
#define HOUR_SECOND      283
#define HP8      284
#define H_      285
#define ID      286
#define IDENTIFIED_SYM      287
#define IF      288
#define IFNULL      289
#define IGNORE_SYM      290
#define IMPORT      291
#define INDEXES      292
#define INDEX_SYM      293
#define INET_ATON      294
#define INET_NTOA      295
#define INFILE      296
#define INITIAL_SIZE_SYM      297
#define INNER_SYM      298
#define INOUT_SYM      299
#define INPLACE_SYM      300
#define INSENSITIVE_SYM      301
#define INSERT      302
#define INSERT_METHOD      303
#define INSTALL_SYM      304
#define INSTR      305
#define INTEGER_NUM      306
#define INTEGER_SYM      307
#define INTERVAL_SYM      308
#define INTO      309
#define INT_SYM      310
#define INVOKER_SYM      311
#define IN_SYM      312
#define IO_SYM      313
#define IPC_SYM      314
#define ISOLATION      315
#define ISSUER_SYM      316
#define IS_FREE_LOCK      317
#define IS_SYM      318
#define IS_USED_LOCK      319
#define ITERATE_SYM      320
#define I_      321
#define JOIN_SYM      322
#define J_      323
#define KEYBCS2      324
#define KEYS      325
#define KEY_BLOCK_SIZE      326
#define KEY_SYM      327
#define KILL_SYM      328
#define KOI8R      329
#define KOI8U      330
#define K_      331
#define LANGUAGE      332
#define LAST_DAY      333
#define LAST_INSERT_ID      334
#define LAST_SYM      335
#define LATIN1      336
#define LATIN1_BIN      337
#define LATIN1_GENERAL_CS      338
#define LATIN2      339
#define LATIN5      340
#define LATIN7      341
#define LBRACK      342
#define LEADING      343
#define LEAVES      344
#define LEAVE_SYM      345
#define LEFT      346
#define LENGTH      347
#define LESS_SYM      348
#define LET      349
#define LEVEL_SYM      350
#define LIKE_SYM      351
#define LIMIT      352
#define LINEAR_SYM      353
#define LINES      354
#define LINESTRING      355
#define LIST_SYM      356
#define LN      357
#define LOAD      358
#define LOAD_FILE      359
#define LOCAL_SYM      360
#define LOCATE      361
#define LOCK      362
#define LOCKS_SYM      363
#define LOG      364
#define LOG10      365
#define LOG2      366
#define LOGFILE_SYM      367
#define LOGS_SYM      368
#define LONGBLOB      369
#define LONGTEXT      370
#define LONG_SYM      371
#define LOOP_SYM      372
#define LOWER      373
#define LOW_PRIORITY      374
#define LPAD      375
#define LPAREN      376
#define LTH      377
#define LTRIM      378
#define L_      379
#define MACCE      380
#define MACROMAN      381
#define MAKEDATE      382
#define MAKETIME      383
#define MAKE_SET      384
#define MASTER_CONNECT_RETRY      385
#define MASTER_HOST_SYM      386
#define MASTER_LOG_FILE_SYM      387
#define MASTER_LOG_POS_SYM      388
#define MASTER_PASSWORD_SYM      389
#define MASTER_PORT_SYM      390
#define MASTER_POS_WAIT      391
#define MASTER_SERVER_ID_SYM      392
#define MASTER_SSL_CAPATH_SYM      393
#define MASTER_SSL_CA_SYM      394
#define MASTER_SSL_CERT_SYM      395
#define MASTER_SSL_CIPHER_SYM      396
#define MASTER_SSL_KEY_SYM      397
#define MASTER_SSL_SYM      398
#define MASTER_SSL_VERIFY_SERVER_CERT      399
#define MASTER_SYM      400
#define MASTER_USER_SYM      401
#define MATCH      402
#define MAXVALUE_SYM      403
#define MAX_CONNECTIONS_PER_HOUR      404
#define MAX_QUERIES_PER_HOUR      405
#define MAX_ROWS      406
#define MAX_SIZE_SYM      407
#define MAX_SYM      408
#define MAX_UPDATES_PER_HOUR      409
#define MAX_USER_CONNECTIONS_SYM      410
#define MD5      411
#define MEDIUMBLOB      412
#define MEDIUMINT      413
#define MEDIUMTEXT      414
#define MEDIUM_SYM      415
#define MEMORY_SYM      416
#define MERGE_SYM      417
#define MICROSECOND      418
#define MID      419
#define MIGRATE_SYM      420
#define MINUS      421
#define MINUTE      422
#define MINUTE_MICROSECOND      423
#define MINUTE_SECOND      424
#define MIN_ROWS      425
#define MIN_SYM      426
#define ML_COMMENT      427
#define MOD      428
#define MODE_SYM      429
#define MODIFIES_SYM      430
#define MODIFY_SYM      431
#define MOD_SYM      432
#define MONTH      433
#define MONTHNAME      434
#define MULTILINESTRING      435
#define MULTIPOINT      436
#define MULTIPOLYGON      437
#define MUTEX_SYM      438
#define M_      439
#define NAMES_SYM      440
#define NAME_CONST      441
#define NAME_SYM      442
#define NATIONAL_SYM      443
#define NATURAL      444
#define NCHAR_SYM      445
#define NEGATION      446
#define NEW_SYM      447
#define NEXT_SYM      448
#define NODEGROUP_SYM      449
#define NONE_SYM      450
#define NOT_EQ      451
#define NOT_SYM      452
#define NOW      453
#define NO_SYM      454
#define NO_WAIT_SYM      455
#define NO_WRITE_TO_BINLOG      456
#define NULL_SYM      457
#define NUMERIC_SYM      458
#define NVARCHAR_SYM      459
#define N_      460
#define OCT      461
#define OFFSET_SYM      462
#define OJ_SYM      463
#define OLD_PASSWORD      464
#define ON      465
#define ONE_SHOT_SYM      466
#define ONE_SYM      467
#define OPEN_SYM      468
#define OPTIMIZE      469
#define OPTION      470
#define OPTIONALLY      471
#define OPTIONS_SYM      472
#define ORD      473
#define ORDER_SYM      474
#define OR_SYM      475
#define OUTER      476
#define OUTFILE      477
#define OUT_SYM      478
#define OWNER_SYM      479
#define O_      480
#define PACK_KEYS_SYM      481
#define PAGE_CHECKSUM_SYM      482
#define PAGE_SYM      483
#define PARSER_SYM      484
#define PARTIAL      485
#define PARTITIONING_SYM      486
#define PARTITIONS_SYM      487
#define PARTITION_SYM      488
#define PASSWORD      489
#define PERIOD_ADD      490
#define PERIOD_DIFF      491
#define PHASE_SYM      492
#define PI      493
#define PLUGINS_SYM      494
#define PLUGIN_SYM      495
#define PLUS      496
#define POINT_SYM      497
#define POLYGON      498
#define PORT_SYM      499
#define POW      500
#define POWER      501
#define POWER_OP      502
#define PRECISION      503
#define PREPARE_SYM      504
#define PRESERVE_SYM      505
#define PREV_SYM      506
#define PRIMARY_SYM      507
#define PRIVILEGES      508
#define PROCEDURE      509
#define PROCESS      510
#define PROCESSLIST_SYM      511
#define PROFILES_SYM      512
#define PROFILE_SYM      513
#define PURGE      514
#define P_      515
#define QUARTER      516
#define QUERY_SYM      517
#define QUICK      518
#define QUOTE      519
#define Q_      520
#define RADIANS      521
#define RAND      522
#define RANGE_SYM      523
#define RBRACK      524
#define READS_SYM      525
#define READ_ONLY_SYM      526
#define READ_SYM      527
#define READ_WRITE_SYM      528
#define REAL      529
#define REAL_NUMBER      530
#define REBUILD_SYM      531
#define RECOVER_SYM      532
#define REDOFILE_SYM      533
#define REDO_BUFFER_SIZE_SYM      534
#define REDUNDANT_SYM      535
#define REFERENCES      536
#define REGEXP      537
#define RELAY_LOG_FILE_SYM      538
#define RELAY_LOG_POS_SYM      539
#define RELEASE_LOCK      540
#define RELEASE_SYM      541
#define RELOAD      542
#define REMOVE_SYM      543
#define RENAME      544
#define REORGANIZE_SYM      545
#define REPAIR      546
#define REPEAT      547
#define REPEATABLE_SYM      548
#define REPLACE      549
#define REPLICATION      550
#define REQUIRE_SYM      551
#define RESET_SYM      552
#define RESOURCES      553
#define RESTORE_SYM      554
#define RESTRICT      555
#define RESUME_SYM      556
#define RETURNS_SYM      557
#define RETURN_SYM      558
#define REVERSE      559
#define REVOKE      560
#define RIGHT      561
#define ROLLBACK      562
#define ROLLUP_SYM      563
#define ROUND      564
#define ROUTINE_SYM      565
#define ROWS_SYM      566
#define ROW_FORMAT_SYM      567
#define ROW_SYM      568
#define RPAD      569
#define RPAREN      570
#define RTREE_SYM      571
#define RTRIM      572
#define R_      573
#define SAVEPOINT      574
#define SCHEDULE_SYM      575
#define SCHEMA      576
#define SECOND      577
#define SECOND_MICROSECOND      578
#define SECURITY_SYM      579
#define SEC_TO_TIME      580
#define SELECT      581
#define SEMI      582
#define SENSITIVE_SYM      583
#define SEPARATOR_SYM      584
#define SERIALIZABLE_SYM      585
#define SERIAL_SYM      586
#define SERVER_SYM      587
#define SESSION_SYM      588
#define SESSION_USER      589
#define SET_SYM      590
#define SET_VAR      591
#define SHARED_SYM      592
#define SHARE_SYM      593
#define SHIFT_LEFT      594
#define SHIFT_RIGHT      595
#define SHOW      596
#define SHUTDOWN      597
#define SIGN      598
#define SIGNED_SYM      599
#define SIMPLE_SYM      600
#define SIN      601
#define SJIS      602
#define SLAVE      603
#define SLEEP      604
#define SL_COMMENT      605
#define SMALLINT      606
#define SNAPSHOT_SYM      607
#define SOCKET_SYM      608
#define SONAME_SYM      609
#define SOUNDEX      610
#define SOUNDS_SYM      611
#define SOURCE_SYM      612
#define SPACE      613
#define SPATIAL_SYM      614
#define SPECIFIC_SYM      615
#define SQLEXCEPTION_SYM      616
#define SQLSTATE_SYM      617
#define SQLWARNING_SYM      618
#define SQL_BIG_RESULT      619
#define SQL_BUFFER_RESULT      620
#define SQL_CACHE_SYM      621
#define SQL_CALC_FOUND_ROWS      622
#define SQL_NO_CACHE_SYM      623
#define SQL_SMALL_RESULT      624
#define SQL_SYM      625
#define SQL_THREAD      626
#define SQRT      627
#define SSL_SYM      628
#define STARTING      629
#define STARTS_SYM      630
#define START_SYM      631
#define STATS_AUTO_RECALC      632
#define STATS_PERSISTENT      633
#define STATUS_SYM      634
#define STD      635
#define STDDEV      636
#define STDDEV_POP      637
#define STDDEV_SAMP      638
#define STOP_SYM      639
#define STORAGE_SYM      640
#define STRAIGHT_JOIN      641
#define STRCMP      642
#define STRING_SYM      643
#define STR_TO_DATE      644
#define SUBJECT_SYM      645
#define SUBPARTITIONS_SYM      646
#define SUBPARTITION_SYM      647
#define SUBSTRING      648
#define SUBSTRING_INDEX      649
#define SUBTIME      650
#define SUM      651
#define SUPER_SYM      652
#define SUSPEND_SYM      653
#define SWAPS_SYM      654
#define SWE7      655
#define SWITCHES_SYM      656
#define SYSDATE      657
#define SYSTEM_USER      658
#define S_      659
#define TABLE      660
#define TABLES      661
#define TABLESPACE      662
#define TABLE_CHECKSUM_SYM      663
#define TAN      664
#define TEMPORARY      665
#define TEMPTABLE_SYM      666
#define TERMINATED      667
#define TEXT_STRING      668
#define TEXT_SYM      669
#define THAN_SYM      670
#define THEN_SYM      671
#define TIMEDIFF      672
#define TIMESTAMP      673
#define TIMESTAMPADD      674
#define TIMESTAMPDIFF      675
#define TIME_FORMAT      676
#define TIME_SYM      677
#define TIME_TO_SEC      678
#define TINYBLOB      679
#define TINYINT      680
#define TINYTEXT      681
#define TIS620      682
#define TO_BASE64      683
#define TO_DAYS      684
#define TO_SECONDS      685
#define TO_SYM      686
#define TRAILING      687
#define TRANSACTION      688
#define TRANSACTIONAL_SYM      689
#define TRIGGERS_SYM      690
#define TRIGGER_SYM      691
#define TRIM      692
#define TRUE_SYM      693
#define TRUNCATE      694
#define TYPES_SYM      695
#define TYPE_SYM      696
#define T_      697
#define UCS2      698
#define UJIS      699
#define UNCOMMITTED_SYM      700
#define UNCOMPRESS      701
#define UNCOMPRESSED_LENGTH      702
#define UNDEFINED_SYM      703
#define UNDOFILE_SYM      704
#define UNDO_BUFFER_SIZE_SYM      705
#define UNDO_SYM      706
#define UNHEX      707
#define UNICODE_SYM      708
#define UNINSTALL_SYM      709
#define UNION_SYM      710
#define UNIQUE_SYM      711
#define UNIX_TIMESTAMP      712
#define UNKNOWN_SYM      713
#define UNLOCK_SYM      714
#define UNSIGNED_SYM      715
#define UNTIL_SYM      716
#define UPDATE      717
#define UPGRADE_SYM      718
#define UPPER      719
#define USAGE      720
#define USER      721
#define USER_VAR      722
#define USER_VAR_SUBFIX1      723
#define USER_VAR_SUBFIX2      724
#define USER_VAR_SUBFIX3      725
#define USER_VAR_SUBFIX4      726
#define USE_FRM      727
#define USE_SYM      728
#define USING_SYM      729
#define UTC_DATE      730
#define UTC_TIME      731
#define UTC_TIMESTAMP      732
#define UTF16      733
#define UTF16LE      734
#define UTF32      735
#define UTF8      736
#define UUID      737
#define U_      738
#define VALUES      739
#define VALUE_SYM      740
#define VARBINARY      741
#define VARCHAR      742
#define VARIABLES      743
#define VARIANCE      744
#define VARYING      745
#define VAR_POP      746
#define VAR_SAMP      747
#define VERSION_SYM      748
#define VERTBAR      749
#define VIEW_SYM      750
#define V_      751
#define WAIT_SYM      752
#define WARNINGS      753
#define WEEK      754
#define WEEKDAY      755
#define WEEKOFYEAR      756
#define WEIGHT_STRING      757
#define WHEN_SYM      758
#define WHERE      759
#define WHILE_SYM      760
#define WHITE_SPACE      761
#define WITH      762
#define WORK_SYM      763
#define WRAPPER_SYM      764
#define WRITE_SYM      765
#define W_      766
#define X509_SYM      767
#define XA_SYM      768
#define XML_SYM      769
#define XOR      770
#define X_      771
#define YEAR      772
#define YEARWEEK      773
#define YEAR_MONTH      774
#define Y_      775
#define ZEROFILL      776
#define Z_      777
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MySQLParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
